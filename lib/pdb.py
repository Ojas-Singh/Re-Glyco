#PDB Format from https://www.cgl.ucsf.edu/chimera/docs/UsersGuide/tutorials/pdbintro.html
import numpy as np
import pandas as pd
import config
import os
from Bio.PDB import PDBParser, Polypeptide
from Bio import PDB

def to_DF(pdbddata):
    df = pd.DataFrame(data=pdbddata)
    df = df.transpose()
    df.columns = ['Number','Name','ResName','Chain','ResId','X','Y','Z','Element']
    return df

def to_normal(df):
    Number = df['Number'].tolist()
    Name = df['Name'].tolist()
    ResName = df['ResName'].tolist()
    Chain = df['Chain'].tolist()
    ResId = df['ResId'].tolist()
    X = df['X'].tolist()
    Y = df['Y'].tolist()
    Z = df['Z'].tolist()
    Element = df['Element'].tolist()
    pdbdata=[Number,Name,ResName,Chain,ResId,X,Y,Z,Element]
    return pdbdata

def parse(f):
    Number = []
    Name = []
    ResName = []
    Chain = []
    ResId = []
    X = []
    Y = []
    Z = []
    Element = []
    pdbdata=[Number,Name,ResName,Chain,ResId,X,Y,Z,Element]
    with open(f, 'r') as f:
            lines = f.readlines()
            i=1
            for line in lines:
                if line.startswith("ATOM"):
                    pdbdata[0].append(int((line[6:11]).strip(" ")))
                    pdbdata[1].append((line[12:16]).strip(" "))
                    pdbdata[2].append((line[17:20]).strip(" "))
                    pdbdata[3].append((line[20:22]).strip(" "))
                    pdbdata[4].append(int((line[22:26]).strip(" ")))
                    pdbdata[5].append(float(line[30:38]))
                    pdbdata[6].append(float(line[39:46]))
                    pdbdata[7].append(float(line[47:54]))
                    pdbdata[8].append((line[76:78]).strip(" "))
                    i+=1
                if  line.startswith("END"):
                    break
    return pdbdata


def exportPDB(fout,pdbdata):
    fn= open(fout,"w+")
    fn.write("REMARK    GENERATED BY Re-Glyco from GlycoShape\n")
    fn.write("REMARK ______    _______         _______  ___      __   __  _______  _______ \n")
    fn.write("REMARK|    _ |  |       |       |       ||   |    |  | |  ||       ||       |\n")
    fn.write("REMARK|   | ||  |    ___| ____  |    ___||   |    |  |_|  ||       ||   _   |\n")
    fn.write("REMARK|   |_||_ |   |___ |____| |   | __ |   |    |       ||       ||  | |  |\n")
    fn.write("REMARK|    __  ||    ___|       |   ||  ||   |___ |_     _||      _||  |_|  |\n")
    fn.write("REMARK|   |  | ||   |___        |   |_| ||       |  |   |  |     |_ |       |\n")
    fn.write("REMARK|___|  |_||_______|       |_______||_______|  |___|  |_______||_______|\n")
    fn.write("REMARK    https://github.com/Ojas-Singh/Re-Glyco\n")
    fn.write("REMARK    THIS FILE CONTAINS ONLY ATOMS\n")
    fn.write("REMARK   Cite:  GlycoShape: A 3D structures database and toolbox for glycomics and glycoanalytics\n")
    fn.write("REMARK          Callum M. Ives* and Ojas Singh*, Silvia Dâ€™Andrea, Carl A. Fogarty, Aoife M. Harbison, Akash Satheesan, Beatrice Tropea, Elisa Fadda\n")
    k=""
    for i in range(len(pdbdata[0])):
        line=list("ATOM".ljust(80))
        line[6:10] = str(pdbdata[0][i]).rjust(5) 
        line[12:15] = str(pdbdata[1][i]).ljust(4) 
        line[17:19] = str(pdbdata[2][i]).rjust(3) 
        line[20:21] = str(pdbdata[3][i]).rjust(2) 
        line[22:25] = str(pdbdata[4][i]).rjust(4) 
        line[30:37] = str('{:0.3f}'.format(pdbdata[5][i])).rjust(8) 
        line[38:45] = str('{:0.3f}'.format(pdbdata[6][i])).rjust(8) 
        line[46:53] = str('{:0.3f}'.format(pdbdata[7][i])).rjust(8) 
        line[75:77] = str(pdbdata[8][i]).rjust(3) 
        line= ''.join(line)
        fn.write(line+"\n")
        k=k+line+"\n"
    return k
                
def get_confidence(system):
    confidence= []
    p=1
    lines = system.split("\n")
    for x in lines:
        if x.startswith("ATOM"):
            if int((x[22:27]).strip(" "))==p:
                try: 
                    confidence.append(float((x[61:67]).strip(" ")))
                except:
                    confidence.append(0)
                p+=1
    return confidence


# {
#     "ALA": "A",
#     "ARG": "R",
#     "ASN": "N",
#     "ASP": "D",
#     "CYS": "C",
#     "GLU": "E",
#     "GLN": "Q",
#     "GLY": "G",
#     "HIS": "H",
#     "ILE": "I",
#     "LEU": "L",
#     "LYS": "K",
#     "MET": "M",
#     "PHE": "F",
#     "PRO": "P",
#     "SER": "S",
#     "THR": "T",
#     "TRP": "W",
#     "TYR": "Y",
#     "VAL": "V"
# }


# Step 1: Adjust get_sequence_from_pdb function

def get_sequence_from_pdb(file_path):
    parser = PDBParser(PERMISSIVE=1)
    structure = parser.get_structure('pdb', file_path)
    sequence_with_info = []  # List to store (residue, ResId, ChainId) tuples
    sequences = []
    
    for model in structure:
        for chain in model:
            chain_sequence = ""  
            for residue in chain:
                if residue.get_id()[0] == ' ':  # Skip over HETATM records
                    try:
                        aa = Polypeptide.three_to_one(residue.get_resname())
                        res_id = residue.get_id()[1]
                        chain_id = chain.get_id()
                        sequence_with_info.append((aa, res_id, chain_id))
                        chain_sequence += aa
                    except:
                        pass
            sequences.append(chain_sequence)
    return sequence_with_info, ' '.join(sequences)


# Step 2: Modify find_glycosylation_spots function

def find_glycosylation_spots(sequence_with_info):
    spots = []
    for i in range(len(sequence_with_info) - 2):
        curr_residue, _, _ = sequence_with_info[i]
        next_residue, _, _ = sequence_with_info[i+1]
        next_next_residue, _, _ = sequence_with_info[i+2]
        
        if curr_residue == 'N' and next_residue != 'P' and (next_next_residue == 'S' or next_next_residue == 'T'):
            spots.append((i + 1, sequence_with_info[i][1], sequence_with_info[i][2]))
        
        if curr_residue in ['T', 'W', 'S']:
            spots.append((i + 1, sequence_with_info[i][1], sequence_with_info[i][2]))
    
    return spots

def find_glycosylation_spots_N(sequence_with_info):
    spots = []
    for i in range(len(sequence_with_info) - 2):
        curr_residue, _, _ = sequence_with_info[i]
        next_residue, _, _ = sequence_with_info[i+1]
        next_next_residue, _, _ = sequence_with_info[i+2]
        
        if curr_residue == 'N' and next_residue != 'P' and (next_next_residue == 'S' or next_next_residue == 'T'):
            spots.append((i + 1, sequence_with_info[i][1], sequence_with_info[i][2]))

    return spots


def remove_hydrogens(input_pdb, output_pdb):
    # Initialize PDB parser
    parser = PDB.PDBParser()
    
    # Read the structure from the PDB file
    structure = parser.get_structure("structure", input_pdb)
    
    # Iterate over the atoms and remove hydrogens
    for model in structure:
        for chain in model:
            for residue in list(chain):
                for atom in list(residue):
                    if atom.element == "H":
                        residue.detach_child(atom.get_id())

    # Save the structure without hydrogens to a new PDB file
    io = PDB.PDBIO()
    io.set_structure(structure)
    io.save(output_pdb)